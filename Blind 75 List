// Two Sum Brute Force Method O(n^2): 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        for(int i = 0; i<nums.length; i++){ 
            for(int j = i+1; j<nums.length; j++){
                if(nums[i]+nums[j] == target)
                    return new int[] {i, j}; 
            }
        }
        return new int[] {0};
    }
}
// Hashmap 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> num_map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int complement = target - nums[i]; 
        
        if(num_map.containsKey(complement)){
            return new int[] {num_map.get(complement), i};
        }
        num_map.put(nums[i], i);
        }
        throw new IllegalArgumentException("no match found"); 
    }
    
}
\\ Best Time to Buy and Sell Stock
class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0; 
        for(int i = 0; i<prices.length; i++){
            for(int j = i+1; j<prices.length; j++){
                if(prices[j]-prices[i]>profit)
                    profit = prices[j]-prices[i]; 
            }
        }
        return profit;
    }
}
\\ O(n)
class Solution {
    public int maxProfit(int[] prices) {
        int max = 0;
        int min = Integer.MAX_VALUE;
        for(int i=0; i<prices.length-1; i++){
            
            if(prices[i]<min){
                min = prices[i]; 
            }else 
                max = Math.max(max, prices[i]-min);
        }
        return max; 
    }
}
\\ Contains Duplicate
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set set = new HashSet<>();
        for(int val : nums) {
            if(!set.add(val))
                return true;
        }
        return false;
    
    }
}

// Product of Array Except Self 
public int[] productExceptSelf(int[] nums) {
        int products[] = new int[nums.length]; 
        products[0] = 1;
        for(int i=1; i<nums.length; i++){ // find left side product
            products[i] = products[i - 1] * nums[i - 1];
            }
        int right = 1;
        for(int i=nums.length-1; i>=0; i--){ // right side product
            products[i]*=right; 
            right *= nums[i];
        }

        
        return products; 
    }
Maximum Subarray
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0], currMaxSum=nums[0];
        for(int i = 1; i<nums.length; i++)
        {
            currMaxSum = Math.max(nums[i], currMaxSum+nums[i]);
            max = Math.max(max,currMaxSum);
        }
        return max;
    }
}
