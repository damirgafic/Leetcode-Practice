// Two Sum Brute Force Method O(n^2): 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        for(int i = 0; i<nums.length; i++){ 
            for(int j = i+1; j<nums.length; j++){
                if(nums[i]+nums[j] == target)
                    return new int[] {i, j}; 
            }
        }
        return new int[] {0};
    }
}
// Hashmap 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> num_map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int complement = target - nums[i]; 
        
        if(num_map.containsKey(complement)){
            return new int[] {num_map.get(complement), i};
        }
        num_map.put(nums[i], i);
        }
        throw new IllegalArgumentException("no match found"); 
    }
    
}
\\ Best Time to Buy and Sell Stock
class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0; 
        for(int i = 0; i<prices.length; i++){
            for(int j = i+1; j<prices.length; j++){
                if(prices[j]-prices[i]>profit)
                    profit = prices[j]-prices[i]; 
            }
        }
        return profit;
    }
}
